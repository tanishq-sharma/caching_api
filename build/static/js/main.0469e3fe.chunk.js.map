{"version":3,"sources":["actions/Post.js","components/Form2.js","components/PostForm.js","actions/Get.js","components/Form1.js","components/GetForm.js","actions/SetSize.js","components/SetSizeForm.js","actions/GetState.js","components/State.js","App.js","serviceWorker.js","index.js"],"names":["key","value","a","fetch","method","body","JSON","stringify","id","String","Post","Form2","onsubmit","className","onSubmit","placeholder","type","PostForm","useState","status","setstatus","event","preventDefault","target","key_post","value_post","Get","callback","axios","get","then","response","notes","data","Form1","pholder","GetForm","key_get","err","size","Size","SetSize","SetSizeForm","parseInt","GetState","State","state","setstate","useEffect","setInterval","map","item","Cache_service","Fragment","fluid","top","xs","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0469e3fe.chunk.js","sourcesContent":["\n\nasync function Post (key , value) {\n  await fetch(`/cache/set`, {\n      method: 'POST',\n      body: JSON.stringify({\n        id: String(key),\n        value: value,\n      })\n    })\n}\n\n\nexport default Post;\n","import React from 'react'\n\nconst Form2 = ({onsubmit})=>  {\n  return (\n    <div className=\"Input_wrapper\">\n    <form onSubmit = {onsubmit } >\n    <input id=\"key_post\" className=\"field\" placeholder=\"Key\" />\n    <input id=\"value_post\" className=\"field\" placeholder=\"Value\"/>\n    <input type=\"submit\" id = \"post\" className = \"button\" />\n    </form>\n    </div>\n  );\n}\n\nexport default Form2;\n","import React,{useState} from \"react\";\nimport Post from '../actions/Post'\nimport Form2 from './Form2'\n\n\n\n\nconst PostForm = ()=>  {\n  const [status,setstatus] = useState('');\n\n  async  function SubmitHandler (event) {\n    event.preventDefault();\n\n    let key = event.target.key_post.value;\n    let value = event.target.value_post.value;\n\n    if(key!=='' && value!=='')\n    {\n       Post(key,value);\n\n    }\n    if(key!== '' && value!== ''){\n    await  setstatus('key: ' + key + ' and value: ' + value + '  has been Set .');\n    }\n    else{\n      await setstatus('enter key and value to post');\n    }\n\n  }\n\n\n  return (\n    <div>\n    <Form2 onsubmit={SubmitHandler}> </Form2>\n    {status}\n    </div>\n  ) ;\n}\n\n\nexport default PostForm ;\n","import axios from 'axios'\n\n\nfunction Get(key,callback){\n    axios\n     .get(`/cache/get?a=`+key)\n     .then(response => {\n       const notes = response.data\n        callback(null,notes);\n\n       })\n}\n\nexport default Get;\n","import React from 'react'\n\n\nconst Form1 = ({pholder , onsubmit}) =>{\n  return (\n    <div className=\"Input_wrapper\">\n    <form onSubmit = {onsubmit}>\n    <input id=\"key_get\" className=\"field\" placeholder={pholder} />\n    <input type = \"submit\" id = \"get\" className = \"button\" />\n    </form>\n      </div>\n  );\n}\n\n\nexport default Form1;\n","import React,{useState} from \"react\";\nimport Get from '../actions/Get'\nimport Form1 from './Form1'\n\n\n\nconst GetForm = () =>{\nconst [status,setstatus] = useState('');\n\n\nasync function SubmitHandler(event) {\n\n      event.preventDefault();\n      var key = event.target.key_get.value;\n      var value ;\nawait Get(key,(err,notes) => {\n    value = notes['Value'];\n    key =   notes['ID'];\n\n    if(key==='')\n    {setstatus('enter key to fetch value.');}\n    else if(key=== null)\n    {setstatus('requested key does not exists! ');}\n    else{setstatus('for key: ' + key+ ' value: ' + value+ ' has been fetched.');}\n\n  });\n\n  }\n\n\n\n\n\n    return (\n      <div>\n    <Form1 onsubmit = {SubmitHandler} pholder = 'Key'></Form1>\n    {status}\n      </div>\n    );\n}\n\nexport default GetForm;\n","\n\nasync function SetSize(size) {\n  await fetch(`/cache/size`, {\n      method: 'POST',\n      body: JSON.stringify({\n        Size:size,\n      })\n    })\n}\n\n\nexport default SetSize;\n","import React,{useState} from \"react\";\nimport SetSize from '../actions/SetSize'\nimport Form1 from './Form1'\n\n\n\n\nconst SetSizeForm = ()=>  {\n  const [status,setstatus] = useState('');\n\n  async  function SubmitHandler (event) {\n    event.preventDefault();\n    let size = parseInt(event.target.key_get.value);\n    await  SetSize(size);\n    await  setstatus('New Cache instantiated');\n  }\n\n\n  return (\n    <div>\n    <Form1 onsubmit={SubmitHandler} pholder = 'Size'> </Form1>\n    {status}\n    </div>\n  ) ;\n}\n\n\nexport default SetSizeForm ;\n","import axios from 'axios'\n\nfunction GetState(callback){\n\n  axios\n    .get(`/cache/state`)\n    .then(response => {\n      callback(null,response.data);\n    }\n    )\n}\n\nexport default GetState;\n","import React,{useState,useEffect} from 'react'\nimport GetState from '../actions/GetState'\n\n\nconst State = () =>{\n  const [state,setstate] = useState([]);\n\n  useEffect(() => {\n    // eslint-disable-next-line\n      const interval = setInterval(() => {\n        GetState((err,state)=>{\n          setstate(state);\n        });\n      }, 1000);\n    }, []);\n\nreturn(\n<div>\n    <ul>\n    {\n\n      state.map(item => (\n      <li key={item}>{item}</li>\n    ))}\n        </ul>\n</div>\n      );\n}\n\nexport default State;\n","import React from 'react';\nimport './App.css';\nimport { Grid, Row, Col } from 'react-flexbox-grid';\nimport PostForm from './components/PostForm'\nimport GetForm from './components/GetForm'\nimport SetSizeForm from './components/SetSizeForm'\nimport State from './components/State'\n\n\n\n\nconst  Cache_service = () => {\n\n\n\n  return (\n    <React.Fragment>\n    <div >\n\n    <header className=\"Heading\">\n  LRU CACHE SYSTEM\n    </header>\n    </div>\n    <Grid fluid>\n    <Row top=\"xs\">\n    <Col xs={7.9} >\n    <div >\n\n    <h4 className=\"smallheading\">Cache Size</h4>\n    <SetSizeForm> </SetSizeForm>\n\n    <h4 className=\"smallheading\">SET DATA</h4>\n    <PostForm> </PostForm>\n    <h4 className=\"smallheading\">GET DATA</h4>\n    <GetForm> </GetForm>\n    </div>\n\n    </Col>\n\n    <Col className=\"A\" xs={5} >\n<header className=\"Heading\">\nLive Cache</header>\n<State> </State>\n    </Col>\n    </Row>\n    </Grid>\n    </React.Fragment>\n  );\n}\n\n\nexport default Cache_service;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.unregister();\n"],"sourceRoot":""}